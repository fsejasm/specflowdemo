// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 10.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace SpecflowAndCodedUI.UI.StandardUIMapClasses
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public partial class StandardUIMap
    {
        
        /// <summary>
        /// AssertTheResult - Use 'AssertTheResultExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertTheResult()
        {
            #region Variable Declarations
            WinText inputLableValue = this.UICalculatorWindow.InputLabel.InputLableValue;
            #endregion

            // Verify that 'Input' label's property 'DisplayText' equals 'ExpectedValue'
            Assert.AreEqual(this.AssertTheResultExpectedValues.InputLableValueDisplayText, inputLableValue.DisplayText);
        }
        
        /// <summary>
        /// ClickAddButton
        /// </summary>
        public void ClickAddButton()
        {
            #region Variable Declarations
            WinButton uIAddButton = this.UICalculatorWindow.UIItemWindow.UIAddButton;
            #endregion

            // Click 'Add' button
            Mouse.Click(uIAddButton, new Point(16, 16));
        }
        
        /// <summary>
        /// ClickEqualsButton
        /// </summary>
        public void ClickEqualsButton()
        {
            #region Variable Declarations
            WinButton uIEqualsButton = this.UICalculatorWindow.UIItemWindow1.UIEqualsButton;
            #endregion

            // Click 'Equals' button
            Mouse.Click(uIEqualsButton, new Point(14, 30));
        }
        
        #region Properties
        public virtual AssertTheResultExpectedValues AssertTheResultExpectedValues
        {
            get
            {
                if ((this.mAssertTheResultExpectedValues == null))
                {
                    this.mAssertTheResultExpectedValues = new AssertTheResultExpectedValues();
                }
                return this.mAssertTheResultExpectedValues;
            }
        }
        
        public UICalculatorWindow UICalculatorWindow
        {
            get
            {
                if ((this.mUICalculatorWindow == null))
                {
                    this.mUICalculatorWindow = new UICalculatorWindow();
                }
                return this.mUICalculatorWindow;
            }
        }
        #endregion
        
        #region Fields
        private AssertTheResultExpectedValues mAssertTheResultExpectedValues;
        
        private UICalculatorWindow mUICalculatorWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertTheResult'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class AssertTheResultExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'Input' label's property 'DisplayText' equals 'ExpectedValue'
        /// </summary>
        public string InputLableValueDisplayText = "ExpectedValue";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UICalculatorWindow : WinWindow
    {
        
        public UICalculatorWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Calculator";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "CalcFrame";
            this.WindowTitles.Add("Calculator");
            #endregion
        }
        
        #region Properties
        public WinTitleBar UICalculatorTitleBar
        {
            get
            {
                if ((this.mUICalculatorTitleBar == null))
                {
                    this.mUICalculatorTitleBar = new WinTitleBar(this);
                    #region Search Criteria
                    this.mUICalculatorTitleBar.WindowTitles.Add("Calculator");
                    #endregion
                }
                return this.mUICalculatorTitleBar;
            }
        }
        
        public InputLabel InputLabel
        {
            get
            {
                if ((this.mInputLabel == null))
                {
                    this.mInputLabel = new InputLabel(this);
                }
                return this.mInputLabel;
            }
        }
        
        public UIItemWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIItemWindow1 UIItemWindow1
        {
            get
            {
                if ((this.mUIItemWindow1 == null))
                {
                    this.mUIItemWindow1 = new UIItemWindow1(this);
                }
                return this.mUIItemWindow1;
            }
        }
        #endregion
        
        #region Fields
        private WinTitleBar mUICalculatorTitleBar;
        
        private InputLabel mInputLabel;
        
        private UIItemWindow mUIItemWindow;
        
        private UIItemWindow1 mUIItemWindow1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class InputLabel : WinWindow
    {
        
        public InputLabel(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "150";
            this.WindowTitles.Add("Calculator");
            #endregion
        }
        
        #region Properties
        public WinText InputLableValue
        {
            get
            {
                if ((this.mInputLableValue == null))
                {
                    this.mInputLableValue = new WinText(this);
                    #region Search Criteria
                    this.mInputLableValue.SearchProperties[WinText.PropertyNames.Name] = "Result";
                    this.mInputLableValue.WindowTitles.Add("Calculator");
                    #endregion
                }
                return this.mInputLableValue;
            }
        }
        #endregion
        
        #region Fields
        private WinText mInputLableValue;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIItemWindow : WinWindow
    {
        
        public UIItemWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "93";
            this.WindowTitles.Add("Calculator");
            #endregion
        }
        
        #region Properties
        public WinButton UIAddButton
        {
            get
            {
                if ((this.mUIAddButton == null))
                {
                    this.mUIAddButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIAddButton.SearchProperties[WinButton.PropertyNames.Name] = "Add";
                    this.mUIAddButton.WindowTitles.Add("Calculator");
                    #endregion
                }
                return this.mUIAddButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIAddButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIItemWindow1 : WinWindow
    {
        
        public UIItemWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "121";
            this.WindowTitles.Add("Calculator");
            #endregion
        }
        
        #region Properties
        public WinButton UIEqualsButton
        {
            get
            {
                if ((this.mUIEqualsButton == null))
                {
                    this.mUIEqualsButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIEqualsButton.SearchProperties[WinButton.PropertyNames.Name] = "Equals";
                    this.mUIEqualsButton.WindowTitles.Add("Calculator");
                    #endregion
                }
                return this.mUIEqualsButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIEqualsButton;
        #endregion
    }
}
